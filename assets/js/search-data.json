{
  
    
        "post0": {
            "title": "Title",
            "content": "import seaborn as sns import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline #keeping the graphs intact along with the notebook and accessing the inline utilitiies from the backend. . df = pd.read_csv(&#39;../Desktop/Air Quality Index/city_day.csv&#39;) df_city_day = df.copy() . df_city_day.head() . City Date PM2.5 PM10 NO NO2 NOx NH3 CO SO2 O3 Benzene Toluene Xylene AQI AQI_Bucket . 0 Ahmedabad | 2015-01-01 | NaN | NaN | 0.92 | 18.22 | 17.15 | NaN | 0.92 | 27.64 | 133.36 | 0.00 | 0.02 | 0.00 | NaN | NaN | . 1 Ahmedabad | 2015-01-02 | NaN | NaN | 0.97 | 15.69 | 16.46 | NaN | 0.97 | 24.55 | 34.06 | 3.68 | 5.50 | 3.77 | NaN | NaN | . 2 Ahmedabad | 2015-01-03 | NaN | NaN | 17.40 | 19.30 | 29.70 | NaN | 17.40 | 29.07 | 30.70 | 6.80 | 16.40 | 2.25 | NaN | NaN | . 3 Ahmedabad | 2015-01-04 | NaN | NaN | 1.70 | 18.48 | 17.97 | NaN | 1.70 | 18.59 | 36.08 | 4.43 | 10.14 | 1.00 | NaN | NaN | . 4 Ahmedabad | 2015-01-05 | NaN | NaN | 22.10 | 21.42 | 37.76 | NaN | 22.10 | 39.33 | 39.31 | 7.01 | 18.89 | 2.78 | NaN | NaN | . df_city_day.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 29531 entries, 0 to 29530 Data columns (total 16 columns): # Column Non-Null Count Dtype -- -- 0 City 29531 non-null object 1 Date 29531 non-null object 2 PM2.5 24933 non-null float64 3 PM10 18391 non-null float64 4 NO 25949 non-null float64 5 NO2 25946 non-null float64 6 NOx 25346 non-null float64 7 NH3 19203 non-null float64 8 CO 27472 non-null float64 9 SO2 25677 non-null float64 10 O3 25509 non-null float64 11 Benzene 23908 non-null float64 12 Toluene 21490 non-null float64 13 Xylene 11422 non-null float64 14 AQI 24850 non-null float64 15 AQI_Bucket 24850 non-null object dtypes: float64(13), object(3) memory usage: 3.6+ MB . df_city_day.isnull().sum() . City 0 Date 0 PM2.5 4598 PM10 11140 NO 3582 NO2 3585 NOx 4185 NH3 10328 CO 2059 SO2 3854 O3 4022 Benzene 5623 Toluene 8041 Xylene 18109 AQI 4681 AQI_Bucket 4681 dtype: int64 . We can see that Xylene and PM10 have the most null values(18K and 11K) respectively. . df_city_day[&#39;AQI_Bucket&#39;].value_counts(ascending= True) . Severe 1338 Good 1341 Very Poor 2337 Poor 2781 Satisfactory 8224 Moderate 8829 Name: AQI_Bucket, dtype: int64 . Mainly there are six categories of AQI which we observe: Good, Satisfactory, Moderate, Poor, Very Poor and Severe. . sns.catplot(x = &quot;AQI_Bucket&quot;, kind= &quot;count&quot;, palette = &quot;ch: 2.87&quot;, height=5, aspect=1.1, data = df_city_day) . &lt;seaborn.axisgrid.FacetGrid at 0x21beb8e09a0&gt; . Plot: Number of entries vs AQI_Bucket Catogory . Let us drop those null values which have the least part to play in the analysis of AQI. . df_city_day = df_city_day.dropna(axis = 0, subset = [&#39;PM10&#39;]) . df_city_day = df_city_day.dropna(axis = 0, subset = [&#39;Xylene&#39;]) . df_city_day.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 7314 entries, 1594 to 29529 Data columns (total 16 columns): # Column Non-Null Count Dtype -- -- 0 City 7314 non-null object 1 Date 7314 non-null object 2 PM2.5 7210 non-null float64 3 PM10 7314 non-null float64 4 NO 7306 non-null float64 5 NO2 7234 non-null float64 6 NOx 7226 non-null float64 7 NH3 6906 non-null float64 8 CO 7257 non-null float64 9 SO2 7149 non-null float64 10 O3 7124 non-null float64 11 Benzene 7312 non-null float64 12 Toluene 7314 non-null float64 13 Xylene 7314 non-null float64 14 AQI 7145 non-null float64 15 AQI_Bucket 7145 non-null object dtypes: float64(13), object(3) memory usage: 971.4+ KB . We would analyse the contribution of these major pollutants city-wise. . df_city_day[[&#39;PM2.5&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;PM2.5&quot;, ascending = False).plot.bar() . &lt;AxesSubplot:xlabel=&#39;City&#39;&gt; . Delhi has the highest levels of PM2.5 whereas Mumbai and Ernakulam turn out to be on the other side of the table. Major reasons behind the rise of PM2.5 levels in Delhi are increasing traffic, dust and smoke from fires. . df_city_day[[&#39;NO&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;NO&quot;, ascending = False).plot.bar(color=&#39;brown&#39;) . &lt;AxesSubplot:xlabel=&#39;City&#39;&gt; . Mumbai has the highest levels of NO whereas Gurugram and Amaravati have quite minimal figures. Major spike of NO in the commercial capital of India are causing respiratory ailments, hematologic side effects, metabolic disorders, low blood pressure, nausea, vomiting and diarrhoea. . df_city_day[[&#39;NO2&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;NO2&quot;, ascending = False).plot.bar(color=&#39;purple&#39;) df_city_day[[&#39;CO&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;CO&quot;, ascending = False).plot.bar(color=&#39;y&#39;) df_city_day[[&#39;SO2&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;SO2&quot;, ascending = False).plot.bar(color=&#39;r&#39;) df_city_day[[&#39;O3&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;O3&quot;, ascending = False).plot.bar(color=&#39;orange&#39;) df_city_day[[&#39;Benzene&#39;, &#39;City&#39;]].groupby([&#39;City&#39;]).median().sort_values(&quot;Benzene&quot;, ascending = False).plot.bar(color=&#39;teal&#39;) . &lt;AxesSubplot:xlabel=&#39;City&#39;&gt; . Ahmedabad has the highest stake when nitrogen dioxides, sulphur dioxides and carbon monoxide is concerned, whereas Gurugram and Kolkata are the most polluted due to ozone and benzene respectively. On a broader view, Ernakulam and Amaravati seem to be less hazardous compared to other mid-tier and top-tier cities. . sns.set() cols = [&#39;SO2&#39;, &#39;NOx&#39;, &#39;O3&#39;, &#39;NO2&#39;, &#39;PM2.5&#39;] sns.pairplot(df_city_day[cols], height = 2.5) plt.show() . We see that SO2 and NO2 are more concentrated towards the origin, hence sensing to be somewhat correlated. While for others, there is no clear indication since they are widely scattered. . corrmat = df_city_day.corr() heatmap_df= corrmat.drop([&#39;NOx&#39;, &#39;NH3&#39;,&#39;O3&#39;,&#39;Toluene&#39;,&#39;Xylene&#39;, &#39;AQI&#39;]).drop([&#39;NOx&#39;, &#39;NH3&#39;,&#39;O3&#39;,&#39;Toluene&#39;,&#39;Xylene&#39;, &#39;AQI&#39;], axis=1) f, ax = plt.subplots(figsize = (10,10)) sns.heatmap(heatmap_df, vmax = 1, square = True, annot = True) . &lt;AxesSubplot:&gt; . PM2.5 has a huge correlation with PM10- both being in the particulate matter category. We can also observe that there is some correlation between carbon monoxide and sulphur dioxide. Similarly, the same is analysed between sulphur dioxide and nitrogen dioxide. The rest are not directly correlated. .",
            "url": "https://ankan-238.github.io/aqi_index_blog/2022/02/04/AQI-India-Blog.html",
            "relUrl": "/2022/02/04/AQI-India-Blog.html",
            "date": " • Feb 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ankan-238.github.io/aqi_index_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ankan-238.github.io/aqi_index_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ankan-238.github.io/aqi_index_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ankan-238.github.io/aqi_index_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}